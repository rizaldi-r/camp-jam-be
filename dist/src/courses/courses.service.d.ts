import { CreateCourseDto } from 'src/courses/dto/create-course.dto';
import { FindAllCoursesQueryDto, FindOneCourseDto } from 'src/courses/dto/find-course-query.dto';
import { UpdateCourseDto } from 'src/courses/dto/update-course.dto';
import { CoursesRepository } from 'src/courses/courses.repository';
import { InstructorsService } from 'src/instructors/instructors.service';
import { CategoriesService } from 'src/categories/categories.service';
export declare class CoursesService {
    private readonly coursesRepository;
    private readonly instructorsService;
    private readonly categoriesService;
    constructor(coursesRepository: CoursesRepository, instructorsService: InstructorsService, categoriesService: CategoriesService);
    isInstructorOwner(resourceId: string, userId: string): Promise<boolean>;
    create(createDto: CreateCourseDto, instructorId: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        imageSrc: string | null;
        imageAlt: string | null;
        description: string | null;
        startDate: Date | null;
        endDate: Date | null;
        isMemberOnly: boolean;
        isLocked: boolean;
        allowedPrograms: import(".prisma/client").$Enums.Program[];
        allowedBatchYears: number[];
        instructorId: string;
    }>;
    findAll(query: FindAllCoursesQueryDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        imageSrc: string | null;
        imageAlt: string | null;
        description: string | null;
        startDate: Date | null;
        endDate: Date | null;
        isMemberOnly: boolean;
        isLocked: boolean;
        allowedPrograms: import(".prisma/client").$Enums.Program[];
        allowedBatchYears: number[];
        instructorId: string;
    }[]>;
    findById(id: string, query?: FindOneCourseDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        imageSrc: string | null;
        imageAlt: string | null;
        description: string | null;
        startDate: Date | null;
        endDate: Date | null;
        isMemberOnly: boolean;
        isLocked: boolean;
        allowedPrograms: import(".prisma/client").$Enums.Program[];
        allowedBatchYears: number[];
        instructorId: string;
    }>;
    findByInstructorId(instructorId: string, query?: FindOneCourseDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        imageSrc: string | null;
        imageAlt: string | null;
        description: string | null;
        startDate: Date | null;
        endDate: Date | null;
        isMemberOnly: boolean;
        isLocked: boolean;
        allowedPrograms: import(".prisma/client").$Enums.Program[];
        allowedBatchYears: number[];
        instructorId: string;
    }[]>;
    update(id: string, updateDto: UpdateCourseDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        imageSrc: string | null;
        imageAlt: string | null;
        description: string | null;
        startDate: Date | null;
        endDate: Date | null;
        isMemberOnly: boolean;
        isLocked: boolean;
        allowedPrograms: import(".prisma/client").$Enums.Program[];
        allowedBatchYears: number[];
        instructorId: string;
    }>;
    remove(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        imageSrc: string | null;
        imageAlt: string | null;
        description: string | null;
        startDate: Date | null;
        endDate: Date | null;
        isMemberOnly: boolean;
        isLocked: boolean;
        allowedPrograms: import(".prisma/client").$Enums.Program[];
        allowedBatchYears: number[];
        instructorId: string;
    }>;
}
