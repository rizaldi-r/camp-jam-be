import { CreateCourseDto } from 'src/courses/dto/create-course.dto';
import { FindAllCoursesQueryDto, FindOneCourseDto } from 'src/courses/dto/find-course-query.dto';
import { UpdateCourseDto } from 'src/courses/dto/update-course.dto';
import { UserType } from 'src/_common/types/user.type';
import { CoursesService } from 'src/courses/courses.service';
export declare class CoursesController {
    private readonly coursesService;
    constructor(coursesService: CoursesService);
    create(createDto: CreateCourseDto, user: UserType): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        imageSrc: string | null;
        imageAlt: string | null;
        description: string | null;
        startDate: Date | null;
        endDate: Date | null;
        isMemberOnly: boolean;
        isLocked: boolean;
        allowedPrograms: import(".prisma/client").$Enums.Program[];
        allowedBatchYears: number[];
        instructorId: string;
    }>;
    createByAdmin(createDto: CreateCourseDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        imageSrc: string | null;
        imageAlt: string | null;
        description: string | null;
        startDate: Date | null;
        endDate: Date | null;
        isMemberOnly: boolean;
        isLocked: boolean;
        allowedPrograms: import(".prisma/client").$Enums.Program[];
        allowedBatchYears: number[];
        instructorId: string;
    }>;
    findAll(query: FindAllCoursesQueryDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        imageSrc: string | null;
        imageAlt: string | null;
        description: string | null;
        startDate: Date | null;
        endDate: Date | null;
        isMemberOnly: boolean;
        isLocked: boolean;
        allowedPrograms: import(".prisma/client").$Enums.Program[];
        allowedBatchYears: number[];
        instructorId: string;
    }[]>;
    findByInstructor(user: UserType, query: FindOneCourseDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        imageSrc: string | null;
        imageAlt: string | null;
        description: string | null;
        startDate: Date | null;
        endDate: Date | null;
        isMemberOnly: boolean;
        isLocked: boolean;
        allowedPrograms: import(".prisma/client").$Enums.Program[];
        allowedBatchYears: number[];
        instructorId: string;
    }[]>;
    findOne(id: string, query: FindOneCourseDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        imageSrc: string | null;
        imageAlt: string | null;
        description: string | null;
        startDate: Date | null;
        endDate: Date | null;
        isMemberOnly: boolean;
        isLocked: boolean;
        allowedPrograms: import(".prisma/client").$Enums.Program[];
        allowedBatchYears: number[];
        instructorId: string;
    }>;
    update(id: string, updateDto: UpdateCourseDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        imageSrc: string | null;
        imageAlt: string | null;
        description: string | null;
        startDate: Date | null;
        endDate: Date | null;
        isMemberOnly: boolean;
        isLocked: boolean;
        allowedPrograms: import(".prisma/client").$Enums.Program[];
        allowedBatchYears: number[];
        instructorId: string;
    }>;
    remove(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        imageSrc: string | null;
        imageAlt: string | null;
        description: string | null;
        startDate: Date | null;
        endDate: Date | null;
        isMemberOnly: boolean;
        isLocked: boolean;
        allowedPrograms: import(".prisma/client").$Enums.Program[];
        allowedBatchYears: number[];
        instructorId: string;
    }>;
}
