generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

// ---------------------
// Enums
// ---------------------

enum ModuleType {
  LECTURE
  ASSIGNMENT
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum MembershipStatus {
  PENDING
  APPROVED
  REJECTED
  NONMEMBER
}

enum Program {
  WEBDEV
  DATA_ANALYST
  MARKETING
}

enum CourseStatus {
  ENROLLED
  ONGOING
  FINISHED
}

enum DescriptionType {
  DESCRIPTION
  LIST
}

// ---------------------
// Core Models
// ---------------------

model User {
  id           String   @id @default(uuid())
  username     String   @unique @db.VarChar(50)
  firstName    String   @map("first_name") @db.VarChar(50)
  lastName     String   @map("last_name") @db.VarChar(50)
  email        String   @unique @db.VarChar(100)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  avatarSrc    String?  @map("avatar_src") @db.VarChar(255)
  role         UserRole @default(STUDENT)
  refreshToken String?  @map("refresh_token")
  lastLogin    DateTime @default(now()) @map("last_login")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // A User can be a Student or an Instructor, but not both at the same time
  student    Student?
  instructor Instructor?

  @@map("user")
}

model Student {
  id               String           @id @default(uuid())
  userId           String           @unique @map("user_id") @db.VarChar(255)
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  program          Program
  batchYear        Int              @map("batch_year")
  membershipStatus MembershipStatus @default(NONMEMBER) @map("membership_status")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  enrollments Enrollment[]
  submissions Submission[]

  @@map("student")
}

model Instructor {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id") @db.VarChar(255)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  program   Program
  userTitle String?  @map("user_title") @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  courses     Course[]
  enrollments Enrollment[]

  @@map("instructor")
}

model Course {
  id                String    @id @default(uuid())
  title             String    @db.VarChar(255)
  imageSrc          String?   @map("image_src") @db.VarChar(255)
  imageAlt          String?   @map("image_alt") @db.VarChar(255)
  description       String?   @db.Text
  startDate         DateTime? @map("start_date")
  endDate           DateTime? @map("end_date")
  isMemberOnly      Boolean   @default(true) @map("is_member_only")
  isLocked          Boolean   @default(true) @map("is_locked")
  instructorId      String    @map("instructor_id") @db.VarChar(255)
  allowedPrograms   Program[] @map("allowed_programs")
  allowedBatchYears Int[]     @map("allowed_batch_years")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  instructor  Instructor          @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  sections    Section[]
  enrollments Enrollment[]
  categories  CoursesCategories[]

  @@map("course")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique @db.VarChar(100)
  programs  Program[] @map("programs")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  courses CoursesCategories[]

  @@map("category")
}

// This is a join table for the many-to-many relationship between Course and Category.
model CoursesCategories {
  courseId   String   @map("course_id") @db.VarChar(255)
  categoryId String   @map("category_id") @db.VarChar(255)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@id([courseId, categoryId])
  @@map("courses_categories")
}

// ---------------------
// Course Structure
// ---------------------

model Section {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(255)
  courseId  String   @map("course_id") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  modules Module[]

  @@map("section")
}

model Module {
  id             String     @id @default(uuid())
  // label          String?    @db.VarChar(255)
  moduleType     ModuleType @map("module_type")
  embedVideoLink String?    @map("embed_video_link") @db.VarChar(255)
  title          String     @db.VarChar(255)
  description    String?    @db.Text
  sectionId      String     @map("section_id") @db.VarChar(255)
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  section            Section             @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  subdescriptions    Subdescription[]
  links              Link[]
  submissions        Submission[]
  submissionTemplate SubmissionTemplate?
  moduleProgresses   ModuleProgress[]

  @@map("module")
}

model Subdescription {
  id          String          @id @default(uuid())
  header      String          @db.VarChar(255)
  type        DescriptionType @default(DESCRIPTION)
  description String?         @db.Text
  moduleId    String          @map("module_id") @db.VarChar(255)
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("subdescription")
}

model Link {
  id        String   @id @default(uuid())
  label     String   @db.VarChar(255)
  href      String   @db.VarChar(255)
  moduleId  String   @map("module_id") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("link")
}

// ---------------------
// User Progress & Submissions
// ---------------------

model Enrollment {
  id           String @id @default(uuid())
  studentId    String @map("student_id") @db.VarChar(255)
  instructorId String @map("instructor_id") @db.VarChar(255)
  courseId     String @map("course_id") @db.VarChar(255)

  status CourseStatus @default(ENROLLED)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  student          Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  instructor       Instructor       @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  course           Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions      Submission[]
  moduleProgresses ModuleProgress[]

  moduleProgress     EnrollmentData? @relation("moduleProgress")
  lectureProgress    EnrollmentData? @relation("lectureProgress")
  assignmentProgress EnrollmentData? @relation("assignmentProgress")
  assignmentScore    EnrollmentData? @relation("assignmentScore")

  // Composite unique constraint to prevent a student from enrolling in the same course twice.
  @@unique([studentId, courseId])
  @@map("enrollment")
}

model EnrollmentData {
  id                 String   @id @default(uuid())
  progressPercentage Decimal? @map("progress_percentage") @db.Decimal(5, 2)
  moduleCompleted    Decimal? @map("module_completed") @db.Decimal(5, 2)
  moduleTotal        Int?     @map("module_total")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  moduleProgressId     String? @unique @map("module_progress_id") @db.VarChar(255)
  lectureProgressId    String? @unique @map("lecture_progress_id") @db.VarChar(255)
  assignmentProgressId String? @unique @map("assignment_progress_id") @db.VarChar(255)
  assignmentScoreId    String? @unique @map("assignment_score_id") @db.VarChar(255)

  enrollmentModuleProgress     Enrollment? @relation("moduleProgress", fields: [moduleProgressId], references: [id], onDelete: Cascade)
  enrollmentLectureProgress    Enrollment? @relation("lectureProgress", fields: [lectureProgressId], references: [id], onDelete: Cascade)
  enrollmentAssignmentProgress Enrollment? @relation("assignmentProgress", fields: [assignmentProgressId], references: [id], onDelete: Cascade)
  enrollmentAssignmentScores   Enrollment? @relation("assignmentScore", fields: [assignmentScoreId], references: [id], onDelete: Cascade)

  @@map("enrollment_data")
}

model ModuleProgress {
  id           String   @id @default(uuid())
  isCompleted  Boolean  @default(false) @map("is_completed")
  enrollmentId String   @map("enrollment_id") @db.VarChar(255)
  moduleId     String   @map("module_id") @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  module     Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([enrollmentId, moduleId])
  @@map("module_progress")
}

model Submission {
  id                   String @id @default(uuid())
  studentId            String @map("student_id") @db.VarChar(255)
  enrollmentId         String @map("enrollment_id") @db.VarChar(255)
  moduleId             String @map("module_id") @db.VarChar(255)
  submissionTemplateId String @map("submission_template_id") @db.VarChar(255)

  isLocked        Boolean @default(false) @map("is_locked")
  isGraded        Boolean @default(false) @map("is_graded")
  isPassed        Boolean @default(false) @map("is_passed")
  scorePercentage Decimal @default(0) @map("score_percentage") @db.Decimal(5, 2)
  scoreAchieved   Decimal @default(0) @map("score_achieved") @db.Decimal(5, 2)
  scoreTotal      Int     @default(100) @map("score_total")
  feedback        String? @db.Text

  student              Student                @relation(fields: [studentId], references: [id], onDelete: Cascade)
  enrollment           Enrollment             @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  module               Module                 @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  submissionTemplate   SubmissionTemplate     @relation(fields: [submissionTemplateId], references: [id], onDelete: Cascade)
  submissionFieldValue SubmissionFieldValue[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Composite unique constraint to prevent a student from submitting the same assignment multiple times.
  @@unique([studentId, moduleId])
  @@map("submission")
}

model SubmissionFieldValue {
  id                String  @id @default(uuid())
  submitted         String?
  submissionId      String  @map("submission_id")
  submissionFieldId String  @map("submission_field_id")

  submission      Submission      @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionField SubmissionField @relation(fields: [submissionFieldId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("submission_field_value")
}

// ---------------------
// Assignment Template for Modules
// ---------------------

model SubmissionTemplate {
  id              String    @id @default(uuid())
  moduleId        String    @unique @map("module_id") @db.VarChar(255)
  submissionTitle String    @map("submission_title") @db.VarChar(255)
  endDate         DateTime? @map("end_date")
  scoreTotal      Int       @default(100) @map("score_total")

  module           Module            @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  submissionFields SubmissionField[]
  submissions      Submission[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("submission_template")
}

model SubmissionField {
  id                   String   @id @default(uuid())
  label                String
  isTextfield          Boolean? @default(false) @map("is_textfield")
  submissionTemplateId String   @map("template_id") @db.VarChar(255)

  submissionTemplate SubmissionTemplate     @relation(fields: [submissionTemplateId], references: [id], onDelete: Cascade)
  submittedContent   SubmissionFieldValue[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("submission_field")
}
